import streamlit as st
import sqlite3
import pandas as pd
from io import BytesIO

# Configura√ß√£o da p√°gina - deve ser a primeira chamada de Streamlit no script
st.set_page_config(page_title="Tarum√£ Pesquisa Conf", page_icon="üå≤")

# Fun√ß√£o para conectar ao banco de dados
def conectar_banco():
    return sqlite3.connect('enquete.db')

# Fun√ß√£o para carregar as configura√ß√µes atuais
def carregar_configuracoes():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('SELECT exibir_real, candidato_favorecido FROM configuracao WHERE id = 1')
    config = cursor.fetchone()
    conn.close()
    return config

# Fun√ß√£o para salvar as configura√ß√µes
def salvar_configuracoes(exibir_real, candidato_favorecido=None):
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE configuracao SET 
        exibir_real = ?,
        candidato_favorecido = ?,
        data_hora = CURRENT_TIMESTAMP
        WHERE id = 1
    ''', (exibir_real, candidato_favorecido))
    conn.commit()
    conn.close()

# Fun√ß√£o para exibir a tabela `configuracao` como dataframe
def exibir_dataframe_configuracao():
    conn = conectar_banco()
    df = pd.read_sql_query("SELECT * FROM configuracao", conn)
    conn.close()
    return df

# Fun√ß√£o para exibir a tabela de tokens
def exibir_tokens():
    conn = conectar_banco()
    df = pd.read_sql_query("SELECT * FROM tokens", conn)
    conn.close()
    return df

# Fun√ß√£o para exibir a tabela de inten√ß√£o de votos
def exibir_tabela_intencao_votos():
    conn = conectar_banco()
    df = pd.read_sql_query("SELECT * FROM intencao_voto", conn)
    conn.close()
    return df

# Fun√ß√£o para exibir a tabela de rejei√ß√£o
def exibir_tabela_rejeicao():
    conn = conectar_banco()
    df = pd.read_sql_query("SELECT * FROM rejeicao", conn)
    conn.close()
    return df

# Fun√ß√£o para zerar os tokens
def zerar_tokens():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('UPDATE tokens SET usado_intencao = FALSE, usado_rejeicao = FALSE')
    conn.commit()
    conn.close()

# Fun√ß√£o para zerar a tabela de inten√ß√£o de votos
def zerar_intencao_votos():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM intencao_voto')
    conn.commit()
    conn.close()

# Fun√ß√£o para zerar a tabela de rejei√ß√£o
def zerar_rejeicao():
    conn = conectar_banco()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM rejeicao')
    conn.commit()
    conn.close()

# Fun√ß√£o para converter DataFrame para Excel e CSV para download
def converter_para_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

def converter_para_csv(df):
    return df.to_csv(index=False).encode('utf-8')

def main():
    st.title("Configura√ß√µes")

    # Exibir op√ß√µes de configura√ß√£o
    st.subheader("Configura√ß√µes dos Gr√°ficos")
    
    config = carregar_configuracoes()

    if config:
        exibir_real, candidato_favorecido = config
    else:
        st.error("Erro ao carregar as configura√ß√µes.")
        exibir_real = True  # Valor padr√£o se ocorrer erro ao carregar
        candidato_favorecido = None

    # Checkbox para exibir gr√°ficos reais
    exibir_real = st.checkbox("Exibir gr√°ficos reais", value=exibir_real)

    # Exibir combobox e dataframe se "Exibir gr√°ficos reais" for desmarcado
    if not exibir_real:
        st.subheader("Sele√ß√£o do Candidato Favorecido")
        candidato_favorecido = st.selectbox(
            "Escolha o candidato que deve ser favorecido:",
            ("Fabio de Paula", "Coronel Crispim", "Prof Eudes")
        )
        st.write("O candidato selecionado receber√° a maior vota√ß√£o quando estiver em desvantagem e a menor rejei√ß√£o quando ele n√£o for o menos rejeitado.")

        # Exibir a tabela de configura√ß√£o como dataframe
        st.subheader("Visualiza√ß√£o da Tabela de Configura√ß√£o")
        df = exibir_dataframe_configuracao()
        st.dataframe(df)

        # Adicionar legenda explicativa
        st.write("Legenda: **1** para 'Sim' (Exibir gr√°ficos reais), **0** para 'N√£o' (N√£o exibir gr√°ficos reais)")

    # Bot√£o para salvar as configura√ß√µes
    if st.button("Salvar Configura√ß√µes"):
        salvar_configuracoes(exibir_real, candidato_favorecido)
        st.success("Configura√ß√µes salvas com sucesso.")

    # Separador
    st.markdown("---")

    # Bot√µes para download dos votos
    st.subheader("Download de Votos")

    df_intencao = exibir_tabela_intencao_votos()
    df_rejeicao = exibir_tabela_rejeicao()

    # Exibir tabelas de inten√ß√£o de votos e rejei√ß√£o com bot√µes para atualizar
    st.subheader("Visualiza√ß√£o da Tabela de Inten√ß√£o de Votos")
    st.dataframe(df_intencao)
    if st.button("Atualizar Tabela de Inten√ß√£o de Votos"):
        df_intencao = exibir_tabela_intencao_votos()
        st.dataframe(df_intencao)
        st.success("Tabela de Inten√ß√£o de Votos atualizada.")

    st.subheader("Visualiza√ß√£o da Tabela de Rejei√ß√£o")
    st.dataframe(df_rejeicao)
    if st.button("Atualizar Tabela de Rejei√ß√£o"):
        df_rejeicao = exibir_tabela_rejeicao()
        st.dataframe(df_rejeicao)
        st.success("Tabela de Rejei√ß√£o atualizada.")

    # Separador acima do bot√£o de download
    st.markdown("---")

    # Download de inten√ß√£o de votos em Excel e CSV
    st.download_button(
        label="Baixar Inten√ß√£o de Votos (Excel)",
        data=converter_para_excel(df_intencao),
        file_name="intencao_votos.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    st.download_button(
        label="Baixar Inten√ß√£o de Votos (CSV)",
        data=converter_para_csv(df_intencao),
        file_name="intencao_votos.csv",
        mime="text/csv"
    )

    # Download de rejei√ß√£o em Excel e CSV
    st.download_button(
        label="Baixar Rejei√ß√£o (Excel)",
        data=converter_para_excel(df_rejeicao),
        file_name="rejeicao.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    st.download_button(
        label="Baixar Rejei√ß√£o (CSV)",
        data=converter_para_csv(df_rejeicao),
        file_name="rejeicao.csv",
        mime="text/csv"
    )

    # Separador para as op√ß√µes de zerar tokens
    st.markdown("---")

    # Exibir tokens antes de zer√°-los
    st.subheader("Visualiza√ß√£o dos Tokens")
    df_tokens = exibir_tokens()
    st.dataframe(df_tokens)

    # Bot√µes para download dos tokens em Excel e CSV
    st.download_button(
        label="Baixar Tokens (Excel)",
        data=converter_para_excel(df_tokens),
        file_name="tokens.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

    st.download_button(
        label="Baixar Tokens (CSV)",
        data=converter_para_csv(df_tokens),
        file_name="tokens.csv",
        mime="text/csv"
    )

    # Separador para a op√ß√£o de zerar banco de dados
    st.markdown("---")

    # Checkbox para zerar banco de dados
    if st.checkbox("Zerar banco de dados"):
        st.warning("Essa a√ß√£o n√£o pode ser desfeita. Selecione as op√ß√µes abaixo para zerar:")

        # Bot√£o para zerar tokens
        if st.button("Zerar Tokens"):
            zerar_tokens()
            st.success("Todos os tokens foram zerados com sucesso.")
            # Reexibir os tokens ap√≥s zerar para verificar se deu certo
            df_tokens = exibir_tokens()
            st.dataframe(df_tokens)
        
        # Bot√£o para zerar inten√ß√£o de votos
        if st.button("Zerar Inten√ß√£o de Votos"):
            zerar_intencao_votos()
            st.success("Todos os votos de inten√ß√£o foram zerados com sucesso.")
            df_intencao = exibir_tabela_intencao_votos()
            st.dataframe(df_intencao)
        
        # Bot√£o para zerar rejei√ß√£o
        if st.button("Zerar Rejei√ß√£o"):
            zerar_rejeicao()
            st.success("Todas as rejei√ß√µes foram zeradas com sucesso.")
            df_rejeicao = exibir_tabela_rejeicao()
            st.dataframe(df_rejeicao)

if __name__ == "__main__":
    main()
